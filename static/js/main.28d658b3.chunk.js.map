{"version":3,"sources":["actions/index.js","pages/Login.js","components/Header.jsx","components/FormAddExpense.jsx","components/ExpensesTable.jsx","pages/Wallet.js","App.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["login","value","type","addExpense","exchangeRates","itemAdded","expenses","removeExpense","expenseItemId","getCurrenciesQuotations","currencies","fetchQuotations","dispatch","a","fetch","response","json","console","error","Login","state","email","password","onInputChange","target","name","setState","btnLogin","props","history","push","this","className","placeholder","data-testid","onChange","disabled","match","length","onClick","Component","connect","Header","totalExpenses","reduce","acc","currency","Number","ask","React","user","wallet","RESET_STATE","description","method","tag","FormAddExpense","id","handleChange","AddExpense","prevState","resetFormInputs","currenciesCode","Object","keys","filter","code","htmlFor","map","index","key","ExpensesTable","deleteExpenseItem","expense","cambio","parseFloat","toFixed","split","Wallet","App","exact","path","component","action","INITIAL_STATE","isFetching","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Boolean","window","location","hostname","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.28d658b3.chunk.js","sourcesContent":["// Actions Types\nexport const LOGIN = 'LOGIN';\nexport const ADD_EXPENSE = 'ADD_EXPENSE';\nexport const REMOVE_EXPENSE = 'REMOVE_EXPENSE';\nexport const REQUEST_CURRENCIES = 'REQUEST_CURRENCIES';\nexport const GET_CURRENCIES_QUOTATIONS = 'GET_CURRENCIES_QUOTATIONS';\n\n// Actions Creators\nexport const login = (value) => ({\n  type: LOGIN,\n  value,\n});\n\nconst addExpense = (exchangeRates, itemAdded) => ({\n  type: ADD_EXPENSE,\n  expenses: {\n    ...itemAdded, exchangeRates,\n  },\n});\n\nexport const removeExpense = (expenseItemId) => ({\n  type: REMOVE_EXPENSE,\n  expenseItemId,\n});\n\nconst requestCurrencies = () => ({\n  type: REQUEST_CURRENCIES,\n});\n\nconst getCurrenciesQuotations = (exchangeRates) => ({\n  type: GET_CURRENCIES_QUOTATIONS,\n  currencies: exchangeRates,\n});\n\nexport function fetchQuotations(itemAdded) {\n  return async (dispatch) => {\n    try {\n      dispatch(requestCurrencies());\n      const URL = 'https://economia.awesomeapi.com.br/json/all';\n      const response = await fetch(URL);\n      const exchangeRates = await response.json();\n      if (!itemAdded) {\n        dispatch(getCurrenciesQuotations(exchangeRates));\n      } else {\n        dispatch(addExpense(exchangeRates, itemAdded));\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { login } from '../actions';\nimport './login.css';\n\nclass Login extends Component {\n  state = {\n    email: '',\n    password: '',\n  };\n\n  onInputChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  btnLogin = () => {\n    const { email } = this.state;\n    const { dispatch, history } = this.props;\n    dispatch(login({ email }));\n    history.push('/carteira');\n  }\n\n  render() {\n    const VALID_EMAIL_REGEX = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/; // https://ui.dev/validate-email-address-javascript\n    const MIN_LENGTH = 5;\n    const { email, password } = this.state;\n    return (\n      <form className=\"loginForm\">\n        <h4>√Årea de Login</h4>\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"E-mail\"\n          data-testid=\"email-input\"\n          className=\"loginFromInputs\"\n          value={ email }\n          onChange={ this.onInputChange }\n        />\n        <input\n          type=\"password\"\n          name=\"password\"\n          placeholder=\"Password\"\n          data-testid=\"password-input\"\n          className=\"loginFromInputs\"\n          value={ password }\n          onChange={ this.onInputChange }\n        />\n        <button\n          type=\"button\"\n          className=\"loginBtn\"\n          disabled={ !email.match(VALID_EMAIL_REGEX) || password.length <= MIN_LENGTH }\n          onClick={ this.btnLogin }\n        >\n          Entrar\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default connect()(Login);\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  dispatch: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './header.css';\n\nclass Header extends React.Component {\n  render() {\n    const { email, expenses } = this.props;\n    const totalExpenses = expenses\n      .reduce((acc, { currency, exchangeRates, value }) => {\n        const itemPriceInReal = Number(value * exchangeRates[currency].ask);\n        return acc + itemPriceInReal;\n      }, 0);\n    const currency = 'BRL';\n    return (\n      <header>\n        <ul>\n          <li data-testid=\"email-field\">\n            {`E-mail: ${email}`}\n          </li>\n          <li data-testid=\"total-field\">\n            {`Despesa Total: R$${totalExpenses}`}\n          </li>\n          <li data-testid=\"header-currency-field\">\n            { currency }\n          </li>\n        </ul>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = ({ user: { email }, wallet: { expenses } }) => ({\n  email,\n  expenses,\n});\n\nexport default connect(mapStateToProps)(Header);\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.shape).isRequired,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchQuotations } from '../actions';\n\nconst alimentacao = 'Alimenta√ß√£o';\n\nconst RESET_STATE = {\n  description: '',\n  value: 0,\n  currency: 'USD',\n  method: 'Dinheiro',\n  tag: alimentacao,\n};\n\nclass FormAddExpense extends React.Component {\n  state = {\n    id: 0,\n    description: '',\n    value: 0,\n    currency: 'USD',\n    method: 'Dinheiro',\n    tag: alimentacao,\n  };\n\n  componentDidMount() {\n    const { dispatch } = this.props;\n    dispatch(fetchQuotations());\n  }\n\n  handleChange = ({ target: { name, value } }) => {\n    this.setState({ [name]: value });\n  }\n\n  AddExpense = () => {\n    this.setState((prevState) => ({\n      id: prevState.id + 1,\n    }));\n\n    const { dispatch } = this.props;\n    dispatch(fetchQuotations(this.state));\n\n    this.resetFormInputs();\n  };\n\n  resetFormInputs = () => this.setState(RESET_STATE);\n\n  render() {\n    const { description, value, currency, method, tag } = this.state;\n    const { currencies } = this.props;\n    const currenciesCode = Object.keys(currencies).filter((code) => code !== 'USDT');\n    return (\n      <form>\n        <label htmlFor=\"description\">\n          Descri√ß√£o:\n          <input\n            type=\"text\"\n            name=\"description\"\n            data-testid=\"description-input\"\n            value={ description }\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"value\">\n          Valor:\n          <input\n            type=\"number\"\n            name=\"value\"\n            data-testid=\"value-input\"\n            value={ value }\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"currency\">\n          Moeda:\n          <select\n            data-testid=\"currency-input\"\n            name=\"currency\"\n            id=\"currency\"\n            value={ currency }\n            onChange={ this.handleChange }\n          >\n            {\n              currenciesCode.map((code, index) => (\n                <option\n                  key={ index }\n                  value={ code }\n                  data-testid={ code }\n                >\n                  { code }\n                </option>\n              ))\n            }\n          </select>\n        </label>\n        <label htmlFor=\"method\">\n          M√©todo de pagamento:\n          <select\n            data-testid=\"method-input\"\n            name=\"method\"\n            id=\"method\"\n            value={ method }\n            onChange={ this.handleChange }\n          >\n            <option value=\"Dinheiro\">Dinheiro</option>\n            <option value=\"Cart√£o de cr√©dito\">Cart√£o de cr√©dito</option>\n            <option value=\"Cart√£o de d√©bito\">Cart√£o de d√©bito</option>\n          </select>\n        </label>\n        <label htmlFor=\"tag\">\n          Categoria:\n          <select\n            data-testid=\"tag-input\"\n            name=\"tag\"\n            id=\"tag\"\n            value={ tag }\n            onChange={ this.handleChange }\n          >\n            <option value=\"Alimenta√ß√£o\">Alimenta√ß√£o</option>\n            <option value=\"Lazer\">Lazer</option>\n            <option value=\"Trabalho\">Trabalho</option>\n            <option value=\"Transporte\">Transporte</option>\n            <option value=\"Sa√∫de\">Sa√∫de</option>\n          </select>\n        </label>\n        <button\n          type=\"button\"\n          onClick={ this.AddExpense }\n        >\n          Adicionar despesa\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = ({ wallet: { currencies } }) => ({\n  currencies,\n});\n\nexport default connect(mapStateToProps)(FormAddExpense);\n\nFormAddExpense.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  currencies: PropTypes.objectOf(\n    PropTypes.objectOf(PropTypes.string),\n  ).isRequired,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './expensesTable.css';\nimport { removeExpense } from '../actions';\n\nclass ExpensesTable extends React.Component {\n  deleteExpenseItem = (expenseItemId) => {\n    const { dispatch } = this.props;\n    dispatch(removeExpense(expenseItemId));\n  };\n\n  render() {\n    const { expenses } = this.props;\n    return (\n      <table className=\"expensesTable\">\n        <caption>Expenses Table</caption>\n        <thead>\n          <tr>\n            <th>\n              Descri√ß√£o\n            </th>\n            <th>\n              Tag\n            </th>\n            <th>\n              M√©todo de pagamento\n            </th>\n            <th>\n              Valor\n            </th>\n            <th>\n              Moeda\n            </th>\n            <th>\n              C√¢mbio utilizado\n            </th>\n            <th>\n              Valor convertido\n            </th>\n            <th>\n              Moeda de convers√£o\n            </th>\n            <th>\n              Editar/Excluir\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            expenses.map((expense) => {\n              const {\n                currency, description, value, method, tag, id, exchangeRates,\n              } = expense;\n              const cambio = parseFloat(exchangeRates[currency].ask);\n              return (\n                <tr key={ id }>\n                  <td>{description}</td>\n                  <td>{tag}</td>\n                  <td>{method}</td>\n                  <td>{parseFloat(value).toFixed(2)}</td>\n                  <td>{exchangeRates[currency].name.split('/')[0]}</td>\n                  <td>{cambio.toFixed(2)}</td>\n                  <td>{parseFloat(value * cambio).toFixed(2)}</td>\n                  <td>Real</td>\n                  <td>\n                    <button\n                      type=\"button\"\n                      data-testid=\"delete-btn\"\n                      onClick={ () => this.deleteExpenseItem(id) }\n                    >\n                      Excluir\n                    </button>\n                  </td>\n                </tr>\n              );\n            })\n          }\n        </tbody>\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = ({ wallet: { expenses } }) => ({\n  expenses,\n});\n\nexport default connect(mapStateToProps)(ExpensesTable);\n\nExpensesTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.shape).isRequired,\n  dispatch: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport Header from '../components/Header';\nimport FormAddExpense from '../components/FormAddExpense';\nimport ExpensesTable from '../components/ExpensesTable';\n\nclass Wallet extends React.Component {\n  render() {\n    return (\n      <>\n        <Header />\n        <FormAddExpense />\n        <ExpensesTable />\n      </>\n    );\n  }\n}\n\nexport default Wallet;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\nimport './app.css';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","import { LOGIN } from '../actions';\n\n// const INITIAL_STATE = { email: '' };\n\nconst user = (state = {}, action) => {\n  switch (action.type) {\n  case LOGIN:\n    return action.value;\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","import {\n  ADD_EXPENSE, REMOVE_EXPENSE, REQUEST_CURRENCIES, GET_CURRENCIES_QUOTATIONS,\n} from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: {},\n  expenses: [],\n  isFetching: false,\n};\n\nconst wallet = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case ADD_EXPENSE:\n    return {\n      ...state,\n      expenses: [...state.expenses, action.expenses],\n      isFetching: false,\n    };\n  case REMOVE_EXPENSE:\n    return {\n      ...state,\n      expenses: state.expenses.filter(({ id }) => id !== action.expenseItemId),\n      isFetching: false,\n    };\n  case REQUEST_CURRENCIES:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case GET_CURRENCIES_QUOTATIONS:\n    return {\n      ...state,\n      currencies: action.currencies,\n      isFetching: false,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter basename={ process.env.PUBLIC_URL }>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}